#define THREAD_GROUPS 32
#define PI 3.141592
#define TAU (PI * 2.0)

Texture2D<float4> read;
RWTexture2D<float4> write;

uint width;
uint height;

uint radius;

float spatialWeight;
float tonalWeight;
bool perChannelTonalWeight;



float Gaussian(float d, float sigma) {
	return 1.0 / (sigma * sqrt(TAU)) * exp(-(d*d) / (2.0 * sigma * sigma));
}



float4 Gaussian(float4 d, float sigma) {
	return 1.0 / (sigma * sqrt(TAU)) * exp(-(d*d) / (2.0 * sigma * sigma));
}



float4 WeightFunction(uint2 s, uint2 s0) {
	float spacialDifference = length(s - s0);
	float4 tonalDifference = read[s] - read[s0];

	if (perChannelTonalWeight) {
		return Gaussian(spacialDifference, spatialWeight) * Gaussian(tonalDifference, tonalWeight);
	}
	else {
		float tonalDifferenceIntensity = 0.2126*tonalDifference.r + 0.7152*tonalDifference.g + 0.0722*tonalDifference.b;
		return Gaussian(spacialDifference, spatialWeight) * Gaussian(tonalDifferenceIntensity, tonalWeight);
	}
}



#pragma kernel FirstPass
[numthreads(THREAD_GROUPS, THREAD_GROUPS, 1)]
void FirstPass(uint2 id : SV_DispatchThreadID)
{
	float4 numerator = float4(0, 0, 0, 0);
	float4 denominator = float4(0, 0, 0, 0);

	for (uint k = 0; k < (radius * 2) + 1; k++) {
		uint2 idOffset = uint2(id.x, id.y + k - radius);

		if (idOffset.y >= 0 && idOffset.y < height) {
			float4 weight = WeightFunction(idOffset, id);
			numerator += read[idOffset] * weight;
			denominator += weight;
		}
	}

	write[id] = numerator / denominator;
}



#pragma kernel SecondPass
[numthreads(THREAD_GROUPS, THREAD_GROUPS, 1)]
void SecondPass(uint2 id : SV_DispatchThreadID)
{
	float4 numerator = float4(0, 0, 0, 0);
	float4 denominator = float4(0, 0, 0, 0);

	for (uint k = 0; k < (radius * 2) + 1; k++) {
		uint2 idOffset = uint2(id.x + k - radius, id.y);

		if (idOffset.x >= 0 && idOffset.x < width) {
			float4 weight = WeightFunction(idOffset, id);
			numerator += read[idOffset] * weight;
			denominator += weight;
		}
	}

	write[id] = numerator / denominator;
}